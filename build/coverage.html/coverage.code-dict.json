{"/home/travis/build/npmtest/node-npmtest-sendmail/test.js":"/* istanbul instrument in package npmtest_sendmail */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sendmail/lib.npmtest_sendmail.js":"/* istanbul instrument in package npmtest_sendmail */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sendmail = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sendmail = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sendmail/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sendmail && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sendmail */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sendmail\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sendmail.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sendmail.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sendmail.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sendmail.__dirname + '/lib.npmtest_sendmail.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sendmail/node_modules/sendmail/sendmail.js":"var tcp = require('net')\nvar dns = require('dns')\nvar DKIMSign = require('dkim-signer').DKIMSign\nvar CRLF = '\\r\\n'\n\nfunction dummy () {}\nmodule.exports = function (options) {\n  options = options || {}\n  var logger = options.logger || (options.silent && {\n    debug: dummy,\n    info: dummy,\n    warn: dummy,\n    error: dummy\n  } || {\n    debug: console.log,\n    info: console.info,\n    warn: console.warn,\n    error: console.error\n  })\n  var dkimPrivateKey = (options.dkim || {}).privateKey\n  var dkimKeySelector = (options.dkim || {}).keySelector || 'dkim'\n  var devPort = options.devPort || -1\n\n  /*\n   *   邮件服务返回代码含义 Mail service return code Meaning\n   *   500   格式错误，命令不可识别（此错误也包括命令行过长）format error, command unrecognized (This error also includes command line too long)\n   *   501   参数格式错误 parameter format error\n   *   502   命令不可实现 command can not be achieved\n   *   503   错误的命令序列 Bad sequence of commands\n   *   504   命令参数不可实现 command parameter can not be achieved\n   *   211   系统状态或系统帮助响应 System status, or system help response\n   *   214   帮助信息 help\n   *   220   服务就绪 Services Ready\n   *   221   服务关闭传输信道 Service closing transmission channel\n   *   421   服务未就绪，关闭传输信道（当必须关闭时，此应答可以作为对任何命令的响应）service is not ready to close the transmission channel (when it is necessary to close, this response may be in response to any command)\n   *   250   要求的邮件操作完成 requested mail action completed\n   *   251   用户非本地，将转发向 non-local users will be forwarded to\n   *   450   要求的邮件操作未完成，邮箱不可用（例如，邮箱忙）Mail the required operation 450 unfinished, mailbox unavailable (for example, mailbox busy)\n   *   550   要求的邮件操作未完成，邮箱不可用（例如，邮箱未找到，或不可访问）Mail action not completed the required 550 mailbox unavailable (eg, mailbox not found, no access)\n   *   451   放弃要求的操作；处理过程中出错 waiver operation; processing error\n   *   551   用户非本地，请尝试 non-local user, please try\n   *   452   系统存储不足，要求的操作未执行 Less than 452 storage system, requiring action not taken\n   *   552   过量的存储分配，要求的操作未执行 excess storage allocation requires action not taken\n   *   553   邮箱名不可用，要求的操作未执行（例如邮箱格式错误） mailbox name is not available, that the requested operation is not performed (for example, mailbox format error)\n   *   354   开始邮件输入，以.结束 Start Mail input to. End\n   *   554   操作失败  The operation failed\n   *   535   用户验证失败 User authentication failed\n   *   235   用户验证成功 user authentication is successful\n   *   334   等待用户输入验证信息 waits for the user to enter authentication information\n   */\n\n  function getHost (email) {\n    var m = /[^@]+@([\\w\\d\\-\\.]+)/.exec(email)\n    return m && m[1]\n  }\n\n  function groupRecipients (recipients) {\n    var groups = {}\n    var host\n    var i = 0\n    for (; i < recipients.length; i++) {\n      host = getHost(recipients[i]);\n      (groups[host] || (groups[host] = [])).push(recipients[i])\n    }\n    return groups\n  }\n\n  /**\n   * connect to domain by Mx record\n   */\n  function connectMx (domain, callback) {\n    if (devPort === -1) { // not in development mode -> search the MX\n      dns.resolveMx(domain, function (err, data) {\n        if (err) {\n          return callback(err)\n        }\n\n        data.sort(function (a, b) { return a.priority < b.priority })\n        logger.debug('mx resolved: ', data)\n\n        if (!data || data.length === 0) {\n          return callback(new Error('can not resolve Mx of <' + domain + '>'))\n        }\n\n        function tryConnect (i) {\n          if (i >= data.length) return callback(new Error('can not connect to any SMTP server'))\n\n          var sock = tcp.createConnection(25, data[i].exchange)\n\n          sock.on('error', function (err) {\n            logger.error('Error on connectMx for: ', data[i], err)\n            tryConnect(++i)\n          })\n\n          sock.on('connect', function () {\n            logger.debug('MX connection created: ', data[i].exchange)\n            sock.removeAllListeners('error')\n            callback(null, sock)\n          })\n        };\n\n        tryConnect(0)\n      })\n    } else { // development mode -> connect to the specified devPort on localhost\n      var sock = tcp.createConnection(devPort)\n\n      sock.on('error', function (err) {\n        callback(new Error('Error on connectMx (development) for \"localhost:' + devPort + '\": ' + err))\n      })\n\n      sock.on('connect', function () {\n        logger.debug('MX (development) connection created: localhost:' + devPort)\n        sock.removeAllListeners('error')\n        callback(null, sock)\n      })\n    }\n  }\n\n  function sendToSMTP (domain, srcHost, from, recipients, body, cb) {\n    var callback = (typeof cb === 'function') ? cb : function () {}\n    connectMx(domain, function (err, sock) {\n      if (err) {\n        logger.error('error on connectMx', err.stack)\n        return callback(err)\n      }\n\n      function w (s) {\n        logger.debug('send ' + domain + '>' + s)\n        sock.write(s + CRLF)\n      }\n\n      sock.setEncoding('utf8')\n\n      sock.on('data', function (chunk) {\n        data += chunk\n        parts = data.split(CRLF)\n        for (var i = 0, len = parts.length - 1; i < len; i++) {\n          onLine(parts[i])\n        }\n        data = parts[parts.length - 1]\n      })\n\n      sock.on('error', function (err) {\n        logger.error('fail to connect ' + domain)\n        callback(err)\n      })\n\n      var data = ''\n      var step = 0\n      var loginStep = 0\n      var queue = []\n      var login = []\n      var parts\n      var cmd\n\n        /*\n         if(mail.user && mail.pass){\n           queue.push('AUTH LOGIN');\n           login.push(new Buffer(mail.user).toString(\"base64\"));\n           login.push(new Buffer(mail.pass).toString(\"base64\"));\n         }\n         */\n\n      queue.push('MAIL FROM:<' + from + '>')\n      for (var i = 0; i < recipients.length; i++) {\n        queue.push('RCPT TO:<' + recipients[i] + '>')\n      }\n      queue.push('DATA')\n      queue.push('QUIT')\n      queue.push('')\n\n      function response (code, msg) {\n        switch (code) {\n          case 220:\n            //*   220   on server ready\n            //*   220   服务就绪\n            if (/\\besmtp\\b/i.test(msg)) {\n              // TODO:  determin AUTH type; auth login, auth crm-md5, auth plain\n              cmd = 'EHLO'\n            } else {\n              cmd = 'HELO'\n            }\n            w(cmd + ' ' + srcHost)\n            break\n\n          case 221: // bye\n          case 235: // verify ok\n          case 250: // operation OK\n          case 251: // foward\n            if (step === queue.length - 1) {\n              logger.info('OK:', code, msg)\n              callback(null, msg)\n            }\n            w(queue[step])\n            step++\n            break\n\n          case 354: // start input end with . (dot)\n            logger.info('sending mail', body)\n            w(body)\n            w('')\n            w('.')\n            break\n\n          case 334: // input login\n            w(login[loginStep])\n            loginStep++\n            break\n\n          default:\n            if (code >= 400) {\n              logger.warn('SMTP responds error code', code)\n              callback(new Error('SMTP code:' + code + ' msg:' + msg))\n              sock.end()\n            }\n        }\n      }\n\n      var msg = ''\n\n      function onLine (line) {\n        logger.debug('recv ' + domain + '>' + line)\n\n        msg += (line + CRLF)\n\n        if (line[3] === ' ') {\n            // 250-information dash is not complete.\n            // 250 OK. space is complete.\n          response(parseInt(line), msg)\n          msg = ''\n        }\n      }\n    })\n  }\n\n  function getAddress (address) {\n    return address.replace(/^.+</, '').replace(/>\\s*$/, '').trim()\n  }\n\n  function getAddresses (addresses) {\n    var i\n    var results = []\n    if (!Array.isArray(addresses)) {\n      addresses = addresses.split(',')\n    }\n    for (i = 0; i < addresses.length; i++) {\n      results.push(getAddress(addresses[i]))\n    }\n    return results\n  }\n\n  /**\n   * sendmail directly\n   *\n   * @param mail {object}\n   *             from\n   *             to\n   *             cc\n   *             bcc\n   *             replyTo      TODO\n   *             returnTo     TODO\n   *             subject\n   *             type         default 'text/plain', 'text/html'\n   *             charset      default 'utf-8'\n   *             encoding     default 'base64'\n   *             id           default timestamp+from\n   *             headers      object\n   *             content\n   *             attachments  TODO\n   *               [{\n   *                 type\n   *                 filename\n   *                 content\n   *               }].\n   *\n   * @param callback function(err, domain).\n   *\n   */\n  function sendmail (mail, callback) {\n    var recipients = []\n    var groups\n    var srcHost\n    if (mail.to) {\n      recipients = recipients.concat(getAddresses(mail.to))\n    }\n\n    if (mail.cc) {\n      recipients = recipients.concat(getAddresses(mail.cc))\n    }\n\n    if (mail.bcc) {\n      recipients = recipients.concat(getAddresses(mail.bcc))\n    }\n\n    groups = groupRecipients(recipients)\n\n    var from = getAddress(mail.from)\n    srcHost = getHost(from)\n    var mailcomposer = require('mailcomposer')\n    var mailMe = mailcomposer(mail)\n    mailMe.build(function (err, message) {\n      if (err) {\n        logger.error('Error on creating message : ', err)\n        callback(err, null)\n        return\n      }\n      if (dkimPrivateKey) {\n        var signature = DKIMSign(message, {\n          privateKey: dkimPrivateKey,\n          keySelector: dkimKeySelector,\n          domainName: srcHost\n        })\n        message = signature + '\\r\\n' + message\n      }\n      for (var domain in groups) {\n        sendToSMTP(domain, srcHost, from, groups[domain], message, callback)\n      }\n    })\n    // COMMENTED OUT BY GP BECAUSE I SAW NO USE FOR IT\n    // var domainsCount = Object.keys(groups).length\n    // var doneCount\n    // var errs = []\n    // function domainDone(domain) {\n    //   return function(err) {\n    //     if (err) {\n    //       errs.push(err)\n    //     }\n    //     if(doneCount == domainsCount) {\n    //       if (errs.length == 0) {\n    //         err = null\n    //       } else if(errs.length == 1) {\n    //         err = errs[0]\n    //       } else {\n    //         err = new Error(errs.map(function(e) {return e.message}).join('\\n'))\n    //       }\n    //       callback(message && new Error(message) || null)\n    //     }\n    //   }\n    // }\n  }\n  return sendmail\n}\n"}